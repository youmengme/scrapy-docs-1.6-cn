.. _topics-loaders:

============
Item 装载器
============

.. module:: scrapy.loader
   :synopsis: Item Loader class

Item Loaders 程序提供了一种方便的机制来填充已删除的 :ref:`Items
<topics-items>`. 尽管可以使用自己的类字典API来填充项目，但是项目加载器通过自动执行一些常见任务（如在分配原始提取数据之前解析原始提取数据），提供了一个更方便的API，用于从抓取过程中填充它们。

换句话说， :ref:`Items <topics-items>` 提供了抓取数据的容器，而Item Loaders提供了填充该容器的机制。

项目加载器旨在提供灵活，高效和简单的机制，用于通过蜘蛛或源格式（HTML，XML等）扩展和覆盖不同的字段解析规则，而不会成为维护的噩梦。

使用 Item Loaders 填充项目
====================================

要使用Item Loader，你必须先将它实例化。你可以使用类似字典的对象（例如：Item或dict）来进行实例化，或者不使用对象也可以，当不用对象进行实例化的时候，Item会自动使用 :attr:`ItemLoader.default_item_class` 属性中指定的Item类在Item Loader构造函数中实例化。

然后，你开始收集数值到Item Loader时，通常使用 
:ref:`Selectors <topics-selectors>`. 你可以在同一个item field里面添加多个数值; Item Loader将知道如何用合适的处理函数来“添加”这些数值。

下面是在 :ref:`Spider <topics-spiders>`, 中典型的项目Loader的用法，使用 :ref:`Product item <topics-items-declaring>` 中声明的 :ref:`Items
chapter <topics-items>`::

    from scrapy.loader import ItemLoader
    from myproject.items import Product

    def parse(self, response):
        l = ItemLoader(item=Product(), response=response)
        l.add_xpath('name', '//div[@class="product_name"]')
        l.add_xpath('name', '//div[@class="product_title"]')
        l.add_xpath('price', '//p[@id="price"]')
        l.add_css('stock', 'p#stock]')
        l.add_value('last_updated', 'today') # you can also use literal values
        return l.load_item()

快速查看这些代码之后，可以我们看到发现 ``name`` 字段被从页面中两个不同的XPath的位置提取:

1. ``//div[@class="product_name"]``
2. ``//div[@class="product_title"]``

换言之，通过数据用 :meth:`~ItemLoader.add_xpath` 的方法，把从两个不同的XPath的位置提取的数据收集起来。的英文这将在以后分配给 ``name`` 字段中的数据。

之后，类似的请求被用于 ``price`` 和 ``stock`` 字段 (后者使用 CSS selector  :meth:`~ItemLoader.add_css` 方法), 最后使用不同的方法 :meth:`~ItemLoader.add_value` 对 ``last_update`` 填充文本值(``today``) 

最终, 当所有数据被收集起来之后, 调用  :meth:`ItemLoader.load_item` 方法, 实际上填充并且返回了之前通过调用  :meth:`~ItemLoader.add_xpath`,
:meth:`~ItemLoader.add_css`, 和 :meth:`~ItemLoader.add_value` 所提取和收集到的数据的Item.

.. _topics-loaders-processors:

输入输出处理器
===========================

Item Loader在每个(Item)字段中都包含了一个输入处理器和一个输出处理器｡ 输入处理器收到数据时立刻提取数据 (通过 :meth:`~ItemLoader.add_xpath`, :meth:`~ItemLoader.add_css` or
:meth:`~ItemLoader.add_value`方法) 之后输入处理器的结果被收集起来并且保存在ItemLoader内. 收集到所有的数据后, 调用
:meth:`ItemLoader.load_item` 方法来填充,并得到填充后的
:class:`~scrapy.item.Item` 对象. 这是当输出处理器被和之前收集到的数据(和用输入处理器处理的)被调用.输出处理器的结果是被分配到Item的最终值｡

让我们看一个例子来说明如何为特定字段调用输入和输出处理器（同样适用于任何其他字段）::

    l = ItemLoader(Product(), some_selector)
    l.add_xpath('name', xpath1) # (1)
    l.add_xpath('name', xpath2) # (2)
    l.add_css('name', css) # (3)
    l.add_value('name', 'test') # (4)
    return l.load_item() # (5)

发生了这些事情:

1. 从 ``xpath1`` 提取出的数据,传递给 输入处理器 的 ``name`` 字段.输入处理器的结果被收集和保存在Item Loader中(但尚未分配给该Item)｡

2. 从 ``xpath2`` 提取出来的数据,传递给(1)中使用的相同的 输入处理器 .输入处理器的结果被附加到在(1)中收集的数据(如果有的话) ｡

3. 这种情况类似于前面的情况，除了从 ``css`` CSS选择器中提取数据，并通过（1）和（2）中使用的相同输入处理器。输入处理器的结果附加到（1）和（2）中收集的数据（如果有的话）。

4. 这种情况也类似于以前的情况，除了直接分配要收集的值，而不是从XPath表达式或CSS选择器中提取。但是，该值仍然通过输入处理器传递。在这种情况下，由于该值不可迭代，因此在将其传递给输入处理器之前将其转换为单个元素的可迭代，因为输入处理器始终接收可迭代。

5. 在步骤（1），（2），（3）和（4）中收集的数据通过该字段的输出处理器 ``name`` 字段.
   输出处理器的结果是分配给 ``name``
   字段中项目的值

值得注意的是，处理器只是可调用的对象，可以使用要解析的数据调用它们，并返回已解析的值。因此您可以使用任何功能作为输入或输出处理器。唯一的要求是它们必须接受一个（且只有一个）位置参数，它将是一个迭代器。

.. note:: 输入和输出处理器都必须接收迭代器作为它们的第一个参数。这些功能的输出可以是任何东西。输入处理器的结果将附加到包含收集值（对于该字段）的内部列表（在Loader中）。输出处理器的结果是最终分配给项目的值。

如果要将普通函数用作处理器，请确保将其 ``self`` 作为第一个参数接收::

    def lowercase_processor(self, values):
        for v in values:
            yield v.lower()

    class MyItemLoader(ItemLoader):
        name_in = lowercase_processor

这是因为无论何时将函数指定为类变量，它都会成为一个方法，并在被调用时将实例作为第一个参数传递。有关详细信息，请参阅 `this answer on stackoverflow`_ .

您需要记住的另一件事是输入处理器返回的值在内部收集（在列表中），然后传递给输出处理器以填充字段。

最后，但并非最不重要的是，为了方便起见，Scrapy 内置了一些 :ref:`常用处理器
<topics-loaders-available-processors>` .

.. _this answer on stackoverflow: https://stackoverflow.com/a/35322635

声明 Item Loaders
======================

通过使用类定义语法，Item Loaders被声明为Items。这是一个例子::

    from scrapy.loader import ItemLoader
    from scrapy.loader.processors import TakeFirst, MapCompose, Join

    class ProductLoader(ItemLoader):

        default_output_processor = TakeFirst()

        name_in = MapCompose(unicode.title)
        name_out = Join()

        price_in = MapCompose(unicode.strip)

        # ...

如您所见，输入处理器使用 ``_in`` 后缀声明，而输出处理器使用 ``_out`` 后缀声明。您还可以使用
:attr:`ItemLoader.default_input_processor` 和
:attr:`ItemLoader.default_output_processor` 属性声明默认的输入/输出处理器 。

.. _topics-loaders-processors-declaring:

声明输入和输出处理器
=====================================

如上一节所示，输入和输出处理器可以在Item Loader定义中声明，以这种方式声明输入处理器是很常见的。但是，还有一个地方可以指定要使用的输入和输出处理器：在 :ref:`Item Field <topics-items-fields>` 元数据中。这是一个例子::

    import scrapy
    from scrapy.loader.processors import Join, MapCompose, TakeFirst
    from w3lib.html import remove_tags

    def filter_price(value):
        if value.isdigit():
            return value

    class Product(scrapy.Item):
        name = scrapy.Field(
            input_processor=MapCompose(remove_tags),
            output_processor=Join(),
        )
        price = scrapy.Field(
            input_processor=MapCompose(remove_tags, filter_price),
            output_processor=TakeFirst(),
        )

::

    >>> from scrapy.loader import ItemLoader
    >>> il = ItemLoader(item=Product())
    >>> il.add_value('name', [u'Welcome to my', u'<strong>website</strong>'])
    >>> il.add_value('price', [u'&euro;', u'<span>1000</span>'])
    >>> il.load_item()
    {'name': u'Welcome to my website', 'price': u'1000'}

输入和输出处理器的优先顺序如下:

1. Item Loader特定于字段的属性: ``field_in`` 和 ``field_out`` (高优先级)
2. Field metadata (``input_processor`` and ``output_processor`` key)
3. Item Loader 默认值: :meth:`ItemLoader.default_input_processor` 和
   :meth:`ItemLoader.default_output_processor` (低优先级)

另请参阅: :ref:`topics-loaders-extending`.

.. _topics-loaders-context:

Item Loader 上下文
===================

Item Loader Context 是任意键/值的dict，它在Item Loader中的所有输入和输出处理器之间共享。它可以在声明，实例化或使用Item Loader时传递。它们用于修改输入/输出处理器的行为。

例如，假设您有一个函数 ``parse_length`` 接收文本值并从中提取长度::

    def parse_length(text, loader_context):
        unit = loader_context.get('unit', 'm')
        # ... length parsing code goes here ...
        return parsed_length

通过接受一个 ``loader_context`` 参数，该函数明确地告诉Item Loader它能够接收Item Loader上下文，因此Item Loader在调用它时传递当前活动的上下文，并且处理器函数 (``parse_length`` 在这种情况下）可以使用它们。

有几种方法可以修改Item Loader上下文值:

1. 通过修改当前活动的Item Loader上下文
   (:attr:`~ItemLoader.context` 属性)::

      loader = ItemLoader(product)
      loader.context['unit'] = 'cm'

2. 在Item Loader实例化中（Item Loader构造函数的关键字参数存储在Item Loader上下文中）::

      loader = ItemLoader(product, unit='cm')

3. 在Item Loader声明中，对于那些支持使用Item Loader上下文实例化它们的输入/输出处理器。 :class:`~processor.MapCompose` 是其中之一::

       class ProductLoader(ItemLoader):
           length_out = MapCompose(parse_length, unit='cm')


ItemLoader objects
==================

.. class:: ItemLoader([item, selector, response], \**kwargs)

    返回一个新的Item Loader来填充给定的Item。如果没有给出项目，则使用该类自动实例化一个项目
    :attr:`default_item_class`.

   当使用 `selector` 或 `response` 参数进行实例化时, :class:`ItemLoader`该类提供了使用 :ref:`selectors <topics-selectors>` 从网页中提取数据的便利机制。.

    :param item: 项目实例来填充利用后续调用 
        :meth:`~ItemLoader.add_xpath`, :meth:`~ItemLoader.add_css`,
        或 :meth:`~ItemLoader.add_value`.
    :type item: :class:`~scrapy.item.Item` object

    :param selector: The selector to extract data from, when using the
        :meth:`add_xpath` (resp. :meth:`add_css`) or :meth:`replace_xpath`
        (resp. :meth:`replace_css`) method.
    :type selector: :class:`~scrapy.selector.Selector` object

    :param response: 
        :attr:`default_selector_class`除非给出了selector参数，否则用于构造选择器的响应 ，在这种情况下，忽略该参数。
    :type response: :class:`~scrapy.http.Response` object

    item, selector, response 和其余关键字参数分配给Loader上下文（可通过 :attr:`context` 属性访问）。

    :class:`ItemLoader` 实例有以下方法:

    .. method:: get_value(value, \*processors, \**kwargs)

       通过给定的  ``processors`` 和关键字处理给定的 ``value`` 参数

        可用关键字参数:

        :param re: a regular expression to use for extracting data from the
            given value using :meth:`~scrapy.utils.misc.extract_regex` method,
            applied before processors
        :type re: str or compiled regex

        示例::

            >>> from scrapy.loader.processors import TakeFirst
            >>> loader.get_value(u'name: foo', TakeFirst(), unicode.upper, re='name: (.+)')
            'FOO`

    .. method:: add_value(field_name, value, \*processors, \**kwargs)

        处理然后为给定字段添加给定的 ``value`` .

        首先通过 :meth:`get_value` 给出
        ``processors`` 和传递该值 ``kwargs``, 然后通过
        :ref:`字段输入处理器 <topics-loaders-processors>` 并将其结果附加到为该字段收集的数据中。如果该字段已包含收集的数据，则添加新数据。

        给定的 ``field_name`` 可以 ``None``, 这种情况下，可以添加多个字段的值。并且处理后的值应该是一个字典，其中field_name映射到值。

        示例::

            loader.add_value('name', u'Color TV')
            loader.add_value('colours', [u'white', u'blue'])
            loader.add_value('length', u'100')
            loader.add_value('name', u'name: foo', TakeFirst(), re='name: (.+)')
            loader.add_value(None, {'name': u'foo', 'sex': u'male'})

    .. method:: replace_value(field_name, value, \*processors, \**kwargs)

        与 :meth:`add_value` 但相似但是用新值替换收集的数据而不是添加它。
        
    .. method:: get_xpath(xpath, \*processors, \**kwargs)

        类似于 :meth:`ItemLoader.get_value` 但接收XPath而不是值，该值用于从与此关联的选择器中提取unicode字符串列表 :class:`ItemLoader`.

        :param xpath: 从中提取数据的XPath
        :type xpath: str

        :param re: str 或编译的正则表达式） - 用于从所选XPath区域提取数据的正则表达式
        :type re: str or compiled regex

        示例::

            # HTML snippet: <p class="product-name">Color TV</p>
            loader.get_xpath('//p[@class="product-name"]')
            # HTML snippet: <p id="price">the price is $1200</p>
            loader.get_xpath('//p[@id="price"]', TakeFirst(), re='the price is (.*)')

    .. method:: add_xpath(field_name, xpath, \*processors, \**kwargs)

        类似于 :meth:`ItemLoader.add_value` 但接收XPath而不是值，该值用于从与此关联的选择器中提取unicode字符串列表 :class:`ItemLoader`.

        参见 :meth:`get_xpath` for ``kwargs``.

        :param xpath:  从中提取数据的XPath
        :type xpath: str

        示例::

            # HTML snippet: <p class="product-name">Color TV</p>
            loader.add_xpath('name', '//p[@class="product-name"]')
            # HTML snippet: <p id="price">the price is $1200</p>
            loader.add_xpath('price', '//p[@id="price"]', re='the price is (.*)')

    .. method:: replace_xpath(field_name, xpath, \*processors, \**kwargs)

        类似于 :meth:`add_xpath` 但替换收集的数据而不是添加它。

    .. method:: get_css(css, \*processors, \**kwargs)

        类似于 :meth:`ItemLoader.get_value` 但接收CSS选择器而不是值，用于从与此关联的选择器中提取unicode字符串列表 :class:`ItemLoader`.

        :param css: 从中提取数据的CSS选择器
        :type css: str

        :param re: str 或编译的正则表达式） - 用于从所选CSS区域提取数据的正则表达式
        :type re: str or compiled regex

        示例::

            # HTML snippet: <p class="product-name">Color TV</p>
            loader.get_css('p.product-name')
            # HTML snippet: <p id="price">the price is $1200</p>
            loader.get_css('p#price', TakeFirst(), re='the price is (.*)')

    .. method:: add_css(field_name, css, \*processors, \**kwargs)

        类似于 :meth:`ItemLoader.add_value` 但接收CSS选择器而不是值，用于从与此关联的选择器中提取unicode字符串列表 :class:`ItemLoader`.

        参见 :meth:`get_css` 的 ``kwargs``.

        :param css: 从中​​提取数据的CSS选择器
        :type css: str

        示例::

            # HTML snippet: <p class="product-name">Color TV</p>
            loader.add_css('name', 'p.product-name')
            # HTML snippet: <p id="price">the price is $1200</p>
            loader.add_css('price', 'p#price', re='the price is (.*)')

    .. method:: replace_css(field_name, css, \*processors, \**kwargs)

        类似于 :meth:`add_css` 但替换收集的数据而不是添加它。

    .. method:: load_item()

        使用到目前为止收集的数据填充项目，并将其返回。收集的数据首先通过 :ref:`output processors
        <topics-loaders-processors>` 以获得分配给每个项目字段的最终值。

    .. method:: nested_xpath(xpath)

        
        使用xpath选择器创建嵌套加载器。提供的选择器相对于与此关联的选择器应用s :class:`ItemLoader`. 嵌套的加载器与父类 :class:`ItemLoader` 共享 :class:`Item`因此调用 :meth:`add_xpath`, :meth:`add_value`, :meth:`replace_value` 等将按预期运行。

    .. method:: nested_css(css)

        使用CSS选择器创建嵌套加载器。提供的选择器相对于与此关联的选择器应用s :class:`ItemLoader`. 嵌套的加载器与父类 :class:`ItemLoader` 共享 :class:`Item`因此调用 :meth:`add_xpath`, :meth:`add_value`, :meth:`replace_value` 等将按预期运行。
    .. method:: get_collected_values(field_name)

        返回给定字段的收集值。

    .. method:: get_output_value(field_name)

        对于给定字段，返回使用输出处理器解析的收集值。此方法根本不会填充或修改项目。

    .. method:: get_input_processor(field_name)

        返回给定字段的输入处理器。

    .. method:: get_output_processor(field_name)

        返回给定字段的输出处理器。

    :class:`ItemLoader` 实例具有以下属性:

    .. attribute:: item

        :class:`~scrapy.item.Item` 对象由此Item Loader解析。
        
    .. attribute:: context

        此项加载器的当前活动 :ref:`上下文 <topics-loaders-context>` 

    .. attribute:: default_item_class

        一个Item类（或工厂），用于在构造函数中未给出时实例化项。

    .. attribute:: default_input_processor

        用于那些未指定一个字段的默认输入处理器。

    .. attribute:: default_output_processor

        默认输出处理器，用于那些未指定一个的字段。

    .. attribute:: default_selector_class

        T用于构造 :attr:`selector` 的类
        :class:`ItemLoader`, 如果在构造函数中只给出了响应。如果在构造函数中给出了选择器，则忽略该属性。有时会在子类中重写此属性。

    .. attribute:: selector

        :class:`~scrapy.selector.Selector`对象从中提取数据。它是构造函数中给出的选择器，或者是使用
        :attr:`default_selector_class`. 从构造函数中给出的响应创建的。此属性是只读的。

.. _topics-loaders-nested:

嵌套加载器
==============

解析文档子节中的相关值时，创建嵌套加载器会很有用。想象一下，您从页面的页脚中提取详细信息，如下所示:

示例:

    <footer>
        <a class="social" href="https://facebook.com/whatever">Like Us</a>
        <a class="social" href="https://twitter.com/whatever">Follow Us</a>
        <a class="email" href="mailto:whatever@example.com">Email Us</a>
    </footer>

如果没有嵌套的加载器，则需要为要提取的每个值指定完整的xpath（或css）。

示例::

    loader = ItemLoader(item=Item())
    # load stuff not in the footer
    loader.add_xpath('social', '//footer/a[@class = "social"]/@href')
    loader.add_xpath('email', '//footer/a[@class = "email"]/@href')
    loader.load_item()

相反，您可以使用页脚选择器创建嵌套加载程序并添加相对于页脚的值。功能相同但您避免重复页脚选择器。

示例::

    loader = ItemLoader(item=Item())
    # load stuff not in the footer
    footer_loader = loader.nested_xpath('//footer')
    footer_loader.add_xpath('social', 'a[@class = "social"]/@href')
    footer_loader.add_xpath('email', 'a[@class = "email"]/@href')
    # no need to call footer_loader.load_item()
    loader.load_item()

您可以任意嵌套加载器，它们可以使用xpath或css选择器。作为一般指导原则，在使代码更简单时使用嵌套加载器，但不要过度嵌套，否则解析器可能难以阅读。

.. _topics-loaders-extending:

重用和扩展 Item Loaders
==================================

随着您的项目变得越来越大并且获得越来越多的爬虫，维护成为一个基本问题，特别是当您必须为每个蜘蛛处理许多不同的解析规则，有很多例外，但又想要重用通用处理器时。

项目加载器旨在减轻解析规则的维护负担，同时不失去灵活性，同时提供扩展和覆盖它们的便利机制。因此，Item Loaders支持传统的Python类继承，用于处理特定蜘蛛（或爬虫组）的差异。

例如，假设某个特定站点用三个破折号（例如 ``---Plasma TV---``) 包含其产品名称，并且您不希望最终在最终产品名称中删除这些破折号。

以下是通过重用和扩展默认的Product Item Loader
Product Item Loader (``ProductLoader``) 来删除这些破折号的方法::

    from scrapy.loader.processors import MapCompose
    from myproject.ItemLoaders import ProductLoader

    def strip_dashes(x):
        return x.strip('-')

    class SiteSpecificLoader(ProductLoader):
        name_in = MapCompose(strip_dashes, ProductLoader.name_in)

扩展项加载器非常有用的另一种情况是，当您有多种源格式时，例如XML和HTML。在XML版本中，您可能希望删除 ``CDATA`` 现的内容。以下是如何执行此操作的示例::

    from scrapy.loader.processors import MapCompose
    from myproject.ItemLoaders import ProductLoader
    from myproject.utils.xml import remove_cdata

    class XmlProductLoader(ProductLoader):
        name_in = MapCompose(remove_cdata, ProductLoader.name_in)

这就是你通常如何扩展输入处理器。

对于输出处理器，更常见的是在字段元数据中声明它们，因为它们通常仅依赖于字段而不依赖于每个特定站点解析规则（如输入处理器那样）。另请参见:
:ref:`topics-loaders-processors-declaring`.

还有许多其他可能的方法来扩展，继承和覆盖您的Item Loaders，并且不同的Item Loaders层次结构可能更适合不同的项目。Scrapy只提供机制; 它不会强加您的Loaders集合的任何特定组织 - 这取决于您和您的项目的需求。

.. _topics-loaders-available-processors:

可用的内置处理器
=============================

.. module:: scrapy.loader.processors
   :synopsis: A collection of processors to use with Item Loaders

即使您可以使用任何可调用函数作为输入和输出处理器，Scrapy也提供了一些常用的处理器，如下所述。其中一些 :class:`MapCompose` 如通常用作输入处理器）组成了按顺序执行的几个函数的输出，以产生最终的解析值。

以下是所有内置处理器的列表:

.. class:: Identity

    最简单的处理器，它什么都不做。它返回原始值不变。它不接收任何构造函数参数，也不接受Loader上下文。
    
    示例::

        >>> from scrapy.loader.processors import Identity
        >>> proc = Identity()
        >>> proc(['one', 'two', 'three'])
        ['one', 'two', 'three']

.. class:: TakeFirst

    从接收的值返回第一个非null /非空值，因此它通常用作单值字段的输出处理器。它不接收任何构造函数参数，也不接受Loader上下文。

    Example::

        >>> from scrapy.loader.processors import TakeFirst
        >>> proc = TakeFirst()
        >>> proc(['', 'one', 'two', 'three'])
        'one'

.. class:: Join(separator=u' ')

    返回与构造函数中给出的分隔符连接的值，默认为 ``u' '``. 它不接受Loader上下文。

   使用默认分隔符时，此处理器等同于函数: ``u' '.join``

    示例::

        >>> from scrapy.loader.processors import Join
        >>> proc = Join()
        >>> proc(['one', 'two', 'three'])
        'one two three'
        >>> proc = Join('<br>')
        >>> proc(['one', 'two', 'three'])
        'one<br>two<br>three'

.. class:: Compose(\*functions, \**default_loader_context)

    一种处理器，它由给定功能的组合构成。这意味着该处理器的每个输入值都被传递给第一个函数，并且该函数的结果被传递给第二个函数，依此类推，直到最后一个函数返回该处理器的输出值。

    默认情况下，停止处理 ``None`` 值。可以通过传递关键字参数 ``stop_on_none=False`` 来更改此行为。

    示例::

        >>> from scrapy.loader.processors import Compose
        >>> proc = Compose(lambda v: v[0], str.upper)
        >>> proc(['hello', 'world'])
        'HELLO'

    每个函数都可以选择接收 ``loader_context`` 参数。对于那些处理器，该处理器将通过该参数传递当前活动的 :ref:`Loader
    上下文 <topics-loaders-context>` .

    构造函数中传递的关键字参数用作传递给每个函数调用的默认Loader上下文值。但是，传递给函数的最终Loader上下文值将被当前活动的Loader上下文覆盖，该上下文可通过该 :meth:`ItemLoader.context` 属性访问。

.. class:: MapCompose(\*functions, \**default_loader_context)

    一种处理器，它由给定功能的组合构成，类似于 :class:`Compose` 处理器。与此处理器的不同之处在于内部结果在函数之间传递的方式，如下所示:

    迭代该处理器的输入值，并将第一个函数应用于每个元素。这些函数调用的结果（每个元素一个）被连接起来构造一个新的iterable，然后用于应用​​第二个函数，依此类推，直到最后一个函数应用于所收集的值列表的每个值，远。最后一个函数的输出值连接在一起以产生该处理器的输出。

    每个特定函数都可以返回值或值列表，这些值使用应用于其他输入值的相同函数返回的值列表进行展平。函数也可以返回，``None`` 在这种情况下，忽略该函数的输出以进行链上的进一步处理。
    
   此处理器提供了一种方便的方法来组合仅使用单个值（而不是迭代）的函数。由于这个原因，
    :class:`MapCompose` 处理器通常用作输入处理器，因为数据通常使用
    :meth:`~scrapy.selector.Selector.extract` 方法提取  :ref:`selectors
    <topics-selectors>` 返回一个unicode字符串列表。

    以下示例应阐明其工作原理::

        >>> def filter_world(x):
        ...     return None if x == 'world' else x
        ...
        >>> from scrapy.loader.processors import MapCompose
        >>> proc = MapCompose(filter_world, str.upper)
        >>> proc(['hello', 'world', 'this', 'is', 'scrapy'])
        ['HELLO, 'THIS', 'IS', 'SCRAPY']

   与Compose处理器一样，函数可以接收Loader上下文，构造函数关键字参数用作默认上下文值。请参阅
    :class:`Compose` 处理器了解更多信息

.. class:: SelectJmes(json_path)

    使用提供给构造函数的json路径查询值并返回输出。
    需要 jmespath (https://github.com/jmespath/jmespath.py) 才能运行。
    该处理器一次只能输入一个输入。

    示例::

        >>> from scrapy.loader.processors import SelectJmes, Compose, MapCompose
        >>> proc = SelectJmes("foo") #for direct use on lists and dictionaries
        >>> proc({'foo': 'bar'})
        'bar'
        >>> proc({'foo': {'bar': 'baz'}})
        {'bar': 'baz'}

    和Json一起工作::

        >>> import json
        >>> proc_single_json_str = Compose(json.loads, SelectJmes("foo"))
        >>> proc_single_json_str('{"foo": "bar"}')
        'bar'
        >>> proc_json_list = Compose(json.loads, MapCompose(SelectJmes('foo')))
        >>> proc_json_list('[{"foo":"bar"}, {"baz":"tar"}]')
        ['bar']
